%ignore /[\t \f]+/  // WS
%declare _INDENT _DEDENT

code: lines?

lines: (line | _LINE)+
line: expr

NAME: /[a-zA-Z_]\w*/
STRING: /'(?!'').*?(?<!\\)(\\\\)*?'/i
NUMBER: /\d+(\.\d+)?/i
BOOL.2: "True" | "False"
COMMENT: /#[^\n]*/
_LINE: ( /\r?\n[\t ]*/ | COMMENT )+

SYMBOL: "!" | "\"" | "$" | "%" | "&" | "." | ":" | ";" | "=" | "?" | "@" | "\\" | "`" | "|" | "~"
OP: SYMBOL+

CMP_OP: "!=" | "==" | "===" | ">" | "<" | ">=" | "<="
AS_OP: "+" | "-"
MD_OP: "*" | "/" | "//" | "mod"
PE_OP: "^"
UN_OP: "+" | "-"

?expr: let
?let: _infix{cexpr, "="}
?cexpr: or | func{or} | for{or} | while{or} | if{or}
?or: _infix{and, "or"}
?and: _infix{not, "and"}
?not: _prefix{not, cmp, "not"}
?cmp: _infix{as, CMP_OP}
?as: _infix{md, AS_OP}
?md: _infix{un, MD_OP}
?un: _prefix{un, pe, UN_OP}
?pe: _infix{thing, PE_OP}
?thing: NAME | basic | call | list | dot

basic: STRING | NUMBER | BOOL
call: thing "(" csv{expr} ")"
list: "[" csv{expr} "]"
dot: thing "." NAME

csv{item}: item ("," item)* ","?
_infix{next, op}: next (op next)*
_prefix{now, next, op}: op now | next

block{next}: ":" (next | _LINE _INDENT lines _DEDENT)
func{next}: "(" csv{NAME} ")" block{next}
for{next}: "for" csv{NAME} "in" next block{next}
while{next}: "while" next block{next}
if{next}: "if" next block{next} (_LINE? elif{next})* _LINE? else{next}?
elif{next}: "elif" next block{next}
else{next}: "else" block{next}